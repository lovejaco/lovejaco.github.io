<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>environment variable on syyim</title>
    <link>https://lovejaco.github.io/tags/environment-variable/</link>
    <description>syyim (environment variable)</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 24 Sep 2020 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://lovejaco.github.io/tags/environment-variable/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[번역] macOS GUI 앱에 대한 시스템적인 PATH 환경 변수 설정</title>
      <link>https://lovejaco.github.io/posts/instructs-mac-os-gui-apps-about-path-environment-variable/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lovejaco.github.io/posts/instructs-mac-os-gui-apps-about-path-environment-variable/</guid>
      <description>&lt;p&gt;원문 링크: &lt;a href=&#34;https://www.bounga.org/tips/2020/04/07/instructs-mac-os-gui-apps-about-path-environment-variable/&#34;&gt;Set system-wide PATH environment variable for Mac OS GUI apps&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;많은 사람들이 Mac OS GUI 앱에서 PATH 환경 변수를 인식하도록 지시하는 방법을 찾는데 어려움을 겪고 있습니다. 때때로 GUI 앱을 설치할 때 시스템에 설치된 바이너리를 사용하려고 하지만 어떤 이유에서인지 찾을 수 없습니다. 이것을 고쳐보겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;저는 이 특별한 문제로 인해 한동안 어려움을 겪었는데, 그 첫번째 앱은 &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; 였습니다. 어떤 이유에서인지 /usr/bin에 있는 것은 인식했지만 /usr/local/bin은 인식하지 못했습니다. 저는 그게 Emacs와 관련된 것이라고 생각했습니다. 그러다가 &lt;a href=&#34;https://qutebrowser.org/&#34;&gt;Qute 브라우저를&lt;/a&gt; 설치하고 Qute 내에서 검색중에 또 한번 시스템에서 사용 가능한 일부 바이너리를 인식하지 못하는 일이 발생했습니다.&lt;/p&gt;
&lt;p&gt;약간의 조사를 했지만 유용한 것을 찾지는 못했습니다. 그러다 어느 시점에 터미널에서 GUI 앱 (Emacs, Qute Browser, MacVim 등)을 시작하면 모든 것이 정상이라는 것을 알게 되었습니다. 시스템의 모든 바이너리를 찾을 수 있었습니다.&lt;/p&gt;
&lt;p&gt;응용 프로그램 폴더에서 해당 아이콘을 클릭하거나 Spotlight를 사용하여 앱을 시작할 때와 터미널을 사용하여 시작할 때의 동작이 다른 이유는 무엇일까요? 나는 호기심이 생겼습니다.&lt;/p&gt;
&lt;p&gt;이건 정말 진정한 지식을 찾아, 맥 OS 내부의 진정한 마스터에 이르는 아주 먼 길이었습니다.&lt;/p&gt;
&lt;p&gt;완전한 이해를 위한 첫 번째 단계는 GUI 앱이 어떻게 내가 쉘에서 설정한 PATH 환경 변수를 인식하고 있는지 내 스스로에게 질문을 던져보는 것이었습니다. 그건 아마도 ~.profile, ~/.bashrc, ~/.bash_profile, ~/.zsh_profile, ~/.zshrc, ~/.config/fish/config.fish 등으로 설정한 내용이죠.&lt;/p&gt;
&lt;p&gt;완전한 &lt;code&gt;PATH&lt;/code&gt;를 알고 있는 셸에서 부터 앱을 시작 해야 한다는 것은 말이 되지 않습니다.&lt;/p&gt;
&lt;p&gt;이 발견 덕분에 확신을 가지고 GUI 앱이 어디에서 경로를 얻는지 이해하기 위해 조사했고 약간 깊이 파고들어간 후에 답을 얻었습니다. 아이콘을 클릭하거나 Spotlight를 통해 시작되는 모든 단일 앱은 launchd 데몬에 의해 설정된 무언가에서 PATH를 가져옵니다.&lt;/p&gt;
&lt;p&gt;이제 GUI 앱에서 사용자 정의 한 PATH를 상속받게 하기 위해 다음과 같이 간단하게 /etc/launchd.conf를 변경하면 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;setenv PATH /usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 /usr/bin 및 /usr/sbin에서만 바이너리를 검색하는 대신 GUI 앱은 다음 모든 경로에서 바이너리를 검색합니다. /usr/ local/bin/usr/local/sbin/usr/bin/bin/usr/sbin/sbin.&lt;/p&gt;
&lt;p&gt;컴퓨터를 재부팅하지 않고 변경 사항을 적용하려면 몇 가지 단계를 더 따라야 합니다.  - 저는 컴퓨터를 재부팅하는 것을 싫어합니다. 이 단계를 통해 launchd 및 spotlight가 새로운 설정을 인식하도록 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ egrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^setenv\ &amp;#34;&lt;/span&gt; /etc/launchd.conf | xargs -t -L &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; launchctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 하면 모든 환경 관련 설정을 launchd로 전달합니다. 그런 다음 Dock 및 Spotlight 앱을 다시 시작해야합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ killall Dock
$ killall Spotlight
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 시작하는 모든 GUI 앱은 응용 프로그램 폴더의 아이콘을 클릭하거나 Spotlight를 사용하여 앱을 시작하여도 이 PATH 환경 변수를 상속받습니다.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[번역] PATH (MacOS) : Mac OS에서 PATH 환경 변수 모범 사례 </title>
      <link>https://lovejaco.github.io/posts/path-macos-best-practice-for-path-environment-variables-on-mac-os/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lovejaco.github.io/posts/path-macos-best-practice-for-path-environment-variables-on-mac-os/</guid>
      <description>&lt;p&gt;원문 링크: &lt;a href=&#34;https://medium.com/@imstudio/path-macos-best-practice-for-path-environment-variables-on-mac-os-35ec4076a486&#34;&gt;PATH (MacOS) : Best practice for PATH Environment Variables On Mac OS&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mac이 훌륭한 OS라는 것을 잘 아시겠지만, MacOS를 사용하다 보면 PATH 환경을 편집하는 방법을 알아야 할 필요가 있습니다. 다행히도 이 작업을 처리하는 것은 쉽습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-환경-변수&#34;&gt;1. 환경 변수&lt;/h2&gt;
&lt;p&gt;환경 변수는 윈도, 맥 OS, 리눅스와 같은 운영체제(Operating System)에서 실행되는 모든 프로세스/사용자가 접근할 수 있는 전역 시스템 변수입니다. 환경 변수는 시스템 전체 값을 저장하는 데 유용합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PATH:&lt;/strong&gt; 가장 자주 사용되는 환경 변수로, 실행 가능한 프로그램을 검색하기 위한 디렉토리 목록을 저장합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; 운영 체제.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;COMPUTENAME, USERNAME:&lt;/strong&gt; 컴퓨터와 현재 사용자 이름을 저장합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SystemRoot:&lt;/strong&gt; 시스템 루트 디렉토리.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(Windows) HOMEDRIVE, HOMEPATH:&lt;/strong&gt; 현재 사용자의 홈 디렉토리.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-macoslinux-환경-변수&#34;&gt;2. (macOS/Linux) 환경 변수&lt;/h2&gt;
&lt;p&gt;macOS/Unix의 환경 변수는 대소 문자를 구분합니다. 전역 환경 변수(모든 프로세스에서 사용 가능)의 이름은 대문자로, 단어는 밑줄 (_)로 연결됩니다. (예 : JAVA_HOME)&lt;/p&gt;
&lt;p&gt;지역 변수(현재 프로세스에서만 사용 가능)는 소문자입니다. 권장되는 방법은 &lt;code&gt;.bash_profile&lt;/code&gt; 파일을 편집하는 것입니다. 이 파일은 시스템에 로그인할 때마다 Bash가 읽고 그 안의 명령을 실행합니다. 가장 좋은 점은 이 파일은 사용자 전용이기 때문에 같은 시스템의 다른 사용자에게 영향을 주지 않는다는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;21--bash-셸에서-환경-변수-사용&#34;&gt;2.1 — Bash 셸에서 환경 변수 사용&lt;/h3&gt;
&lt;p&gt;대부분의 유닉스(Ubuntu/macOS)는 소위 Bash 셸을 사용합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 환경 변수를 나열하려면 &amp;ldquo;env&amp;rdquo;(또는 &amp;ldquo;printenv&amp;rdquo;) 명령을 사용하고 &amp;ldquo;set&amp;quot;을 사용하여 모든 로컬 변수를 포함한 모든 변수를 나열할 수 있습니다.&lt;/li&gt;
&lt;li&gt;변수를 참조하려면 접두사 &amp;lsquo;$&amp;lsquo;와 함께 &lt;code&gt;$varname&lt;/code&gt;을 사용합니다 (Windows에서는 %varname% 사용).&lt;/li&gt;
&lt;li&gt;특정 변수의 값을 출력하려면 &lt;code&gt;echo $varname&lt;/code&gt; 명령을 사용하세요.&lt;/li&gt;
&lt;li&gt;환경 변수를 설정하려면 변수를 설정하고 전역 환경으로 내보내는 &lt;code&gt;export varname=value&lt;/code&gt; 명령을 사용합니다 (다른 프로세스에서 사용 가능). 값에 공백이 포함된 경우 값을 큰따옴표로 묶습니다.&lt;/li&gt;
&lt;li&gt;로컬(지역) 변수를 설정하려면 &lt;code&gt;varname=value&lt;/code&gt; (또는 &lt;code&gt;set varname=value&lt;/code&gt;) 명령을 사용합니다. 로컬 변수는 이 프로세스 내에서만 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;로컬(지역) 변수를 해제하려면 &lt;code&gt;varname=&lt;/code&gt; 명령을 사용합니다. 즉, 빈 문자열로 설정 (또는 &lt;code&gt;unset varname&lt;/code&gt;)합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22--bash-셸에서-영속적으로-환경-변수를-설정하는-방법&#34;&gt;2.2 — Bash 셸에서 영속적으로 환경 변수를 설정하는 방법&lt;/h3&gt;
&lt;p&gt;홈 디렉토리의 Bash Shell 시작 스크립트 &lt;code&gt;~/.bashrc&lt;/code&gt; (또는 &amp;ldquo;~/.bash_profile&amp;rdquo; 또는 &amp;ldquo;~/.profile&amp;rdquo;)에 &lt;code&gt;export&lt;/code&gt; 명령을 배치하거나 시스템-수준의 작업을 위해 &lt;code&gt;/etc/profile&lt;/code&gt;을 배치하여 환경 변수를 영속적으로 설정할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;점 (.) 포함된 파일이나 디렉토리는 기본적으로 숨겨져 있습니다. 숨겨진 파일을 표시하려면 &amp;ldquo;ls -a&amp;quot;또는 &amp;ldquo;ls -al&amp;quot;명령을 사용하세요. 맥 파인더에서 단축키는 (Shift + Command + .)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;예를 들어 PATH 환경 변수에 디렉토리를 추가하려면 &amp;ldquo;~/.bashrc&amp;rdquo; (또는 &amp;ldquo;~/.bash_profile&amp;rdquo; 또는 &amp;ldquo;~/.profile&amp;rdquo;) 끝에 다음 줄을 추가합니다. 여기서 ~(물결 표시는) 현재 사용자의 홈 디렉토리를 의미합니다. 모든 사용자의 경우에는 &amp;ldquo;/etc/profile”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 단계 :&lt;/strong&gt; 터미널 창 열기
&lt;strong&gt;2 단계 :&lt;/strong&gt; 다음 명령을 입력합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;touch ~/.bash_profile; open ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 파일을 통해 실행 중인 환경을 사용자 정의할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java의 경우) 다음 행을 추가하여 CLASSPATH 환경 변수를 설정할 수 있습니다. 예를 들면&lt;br&gt;
export CLASSPATH =. : /usr/local/tomcat/lib/servlet-api.jar&lt;br&gt;
Bash 셸은 콜론 (:)을 경로 구분자로 사용합니다. windows는 세미콜론 (;)을 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3 단계 :&lt;/strong&gt; PATH에 추가 하고 싶은 디렉토리를 경로를 추가하세요. 예를 들면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;export IM_STUDIO_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$HOME&lt;span style=&#34;color:#e6db74&#34;&gt;/.imstudio/bin:&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;// Append a directory in front of the existing PATH
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/mysql/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 예제는 &lt;code&gt;~/.imstudio&lt;/code&gt; 경로를 PATH에 추가합니다. $PATH 부분은 기존 PATH를 추가하여 새 값으로 유지하므로 매우  중요합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 단계 :&lt;/strong&gt; .bash_profile 파일을 저장하고 텍스트 편집을 종료합니다 (Command + Q).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“: wq! nano 편집기를 사용하는 경우”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;5 단계 :&lt;/strong&gt; .bash_profile을 강제 실행합니다. 이렇게하면 재부팅하지 않고 즉시 값을 로드합니다. 터미널 창에서 다음 명령을 실행하십시오.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;source ~/.bashrc
// or
source ~/.bash_profile
source ~/.profile
source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 Mac OS X 컴퓨터 시스템에서 PATH를 편집하는 방법을 알았습니다. 새 터미널 창을 열고 다음을 실행하여 새 경로를 확인할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;echo $PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 PATH에서 원하는 값을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6 단계 :&lt;/strong&gt; 마지막으로 PATH에 문제가 있고 잘못된 경로를 &amp;ldquo;다시 실행&amp;quot;하거나 &amp;ldquo;제거&amp;quot;하려는 경우 다음과 같이 생각할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;launchctl unsetenv IM_STUDIO_PATH&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-beautiful-tips&#34;&gt;3. Beautiful Tips&lt;/h2&gt;
&lt;h3 id=&#34;31---현재-환경-변수-설정을-확인합니다&#34;&gt;3.1 - 현재 환경 변수 설정을 확인합니다.&lt;/h3&gt;
&lt;p&gt;터미널에서 &amp;ldquo;printenv&amp;rdquo; 입력&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*XmziTfiFd5oYuHTjGzFg1g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;32--예제&#34;&gt;3.2- 예제&lt;/h3&gt;
&lt;p&gt;export JAVA_HOME = $ (/usr/libexec/java_home)
export JRE_HOME = $ (/usr/libexec/java_home)&lt;/p&gt;
&lt;h3 id=&#34;33--linux--macos-bash-shell에서-java_home을-설정하는-방법&#34;&gt;3.3 — Linux / macOS (Bash Shell)에서 JAVA_HOME을 설정하는 방법&lt;/h3&gt;
&lt;p&gt;먼저 터미널을 시작하고 다음을 실행하여 JAVA_HOME이 이미 설정되어 있는지 확인하십시오.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;echo $ JAVA_HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt; 은 JDK가 설치된 디렉토리로 설정됩니다. JDK가 설치된 디렉토리를 찾아야합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/Library/Java/JavaVirtualMachines/…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“~/.bashrc” 끝에 다음 행을 추가하십시오.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;export JAVA_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/path/to/JDK-installed-directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;새 설정을 적용하려면 bash 셸을 새로 고쳐야합니다. 다음과 같이 &amp;ldquo;source&amp;quot;명령을 실행하십시오.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;// Bash 셸 새로 고침
source ~/.bashrc   // or &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source ~/.login&amp;#34;&lt;/span&gt;
// 새 설정 확인
echo $JAVA_HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thank for your watching. Please feel free to feedback for me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hathaway.cc/2008/06/how-to-edit-your-path-environment-variables-on-mac/&#34;&gt;https://hathaway.cc/2008/06/how-to-edit-your-path-environment-variables-on-mac/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://osxdaily.com/2015/07/28/set-enviornment-variables-mac-os-x/&#34;&gt;https://osxdaily.com/2015/07/28/set-enviornment-variables-mac-os-x/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www3.ntu.edu.sg/home/ehchua/programming/howto/Environment_Variables.html&#34;&gt;https://www3.ntu.edu.sg/home/ehchua/programming/howto/Environment_Variables.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>